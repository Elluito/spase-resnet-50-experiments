{"format": "torch", "nodes": [{"name": "model", "id": 47246388134288, "class_name": "WideResNet(\n  (conv1): Conv2d(3, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n  (block1): NetworkBlock(\n    (layer): Sequential(\n      (0): BasicBlock(\n        (bn1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (relu1): ReLU(inplace=True)\n        (conv1): Conv2d(16, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        (bn2): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (relu2): ReLU(inplace=True)\n        (conv2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        (convShortcut): Conv2d(16, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)\n      )\n      (1): BasicBlock(\n        (bn1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (relu1): ReLU(inplace=True)\n        (conv1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        (bn2): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (relu2): ReLU(inplace=True)\n        (conv2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n      )\n      (2): BasicBlock(\n        (bn1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (relu1): ReLU(inplace=True)\n        (conv1): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        (bn2): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (relu2): ReLU(inplace=True)\n        (conv2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n      )\n    )\n  )\n  (block2): NetworkBlock(\n    (layer): Sequential(\n      (0): BasicBlock(\n        (bn1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (relu1): ReLU(inplace=True)\n        (conv1): Conv2d(32, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\n        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (relu2): ReLU(inplace=True)\n        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        (convShortcut): Conv2d(32, 64, kernel_size=(1, 1), stride=(2, 2), bias=False)\n      )\n      (1): BasicBlock(\n        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (relu1): ReLU(inplace=True)\n        (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (relu2): ReLU(inplace=True)\n        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n      )\n      (2): BasicBlock(\n        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (relu1): ReLU(inplace=True)\n        (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (relu2): ReLU(inplace=True)\n        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n      )\n    )\n  )\n  (block3): NetworkBlock(\n    (layer): Sequential(\n      (0): BasicBlock(\n        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (relu1): ReLU(inplace=True)\n        (conv1): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\n        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (relu2): ReLU(inplace=True)\n        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        (convShortcut): Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)\n      )\n      (1): BasicBlock(\n        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (relu1): ReLU(inplace=True)\n        (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (relu2): ReLU(inplace=True)\n        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n      )\n      (2): BasicBlock(\n        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (relu1): ReLU(inplace=True)\n        (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (relu2): ReLU(inplace=True)\n        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n      )\n    )\n  )\n  (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n  (relu): ReLU(inplace=True)\n  (fc): Linear(in_features=128, out_features=10, bias=True)\n)", "parameters": [["conv1.weight", [16, 3, 3, 3]], ["block1.layer.0.bn1.weight", [16]], ["block1.layer.0.bn1.bias", [16]], ["block1.layer.0.conv1.weight", [32, 16, 3, 3]], ["block1.layer.0.bn2.weight", [32]], ["block1.layer.0.bn2.bias", [32]], ["block1.layer.0.conv2.weight", [32, 32, 3, 3]], ["block1.layer.0.convShortcut.weight", [32, 16, 1, 1]], ["block1.layer.1.bn1.weight", [32]], ["block1.layer.1.bn1.bias", [32]], ["block1.layer.1.conv1.weight", [32, 32, 3, 3]], ["block1.layer.1.bn2.weight", [32]], ["block1.layer.1.bn2.bias", [32]], ["block1.layer.1.conv2.weight", [32, 32, 3, 3]], ["block1.layer.2.bn1.weight", [32]], ["block1.layer.2.bn1.bias", [32]], ["block1.layer.2.conv1.weight", [32, 32, 3, 3]], ["block1.layer.2.bn2.weight", [32]], ["block1.layer.2.bn2.bias", [32]], ["block1.layer.2.conv2.weight", [32, 32, 3, 3]], ["block2.layer.0.bn1.weight", [32]], ["block2.layer.0.bn1.bias", [32]], ["block2.layer.0.conv1.weight", [64, 32, 3, 3]], ["block2.layer.0.bn2.weight", [64]], ["block2.layer.0.bn2.bias", [64]], ["block2.layer.0.conv2.weight", [64, 64, 3, 3]], ["block2.layer.0.convShortcut.weight", [64, 32, 1, 1]], ["block2.layer.1.bn1.weight", [64]], ["block2.layer.1.bn1.bias", [64]], ["block2.layer.1.conv1.weight", [64, 64, 3, 3]], ["block2.layer.1.bn2.weight", [64]], ["block2.layer.1.bn2.bias", [64]], ["block2.layer.1.conv2.weight", [64, 64, 3, 3]], ["block2.layer.2.bn1.weight", [64]], ["block2.layer.2.bn1.bias", [64]], ["block2.layer.2.conv1.weight", [64, 64, 3, 3]], ["block2.layer.2.bn2.weight", [64]], ["block2.layer.2.bn2.bias", [64]], ["block2.layer.2.conv2.weight", [64, 64, 3, 3]], ["block3.layer.0.bn1.weight", [64]], ["block3.layer.0.bn1.bias", [64]], ["block3.layer.0.conv1.weight", [128, 64, 3, 3]], ["block3.layer.0.bn2.weight", [128]], ["block3.layer.0.bn2.bias", [128]], ["block3.layer.0.conv2.weight", [128, 128, 3, 3]], ["block3.layer.0.convShortcut.weight", [128, 64, 1, 1]], ["block3.layer.1.bn1.weight", [128]], ["block3.layer.1.bn1.bias", [128]], ["block3.layer.1.conv1.weight", [128, 128, 3, 3]], ["block3.layer.1.bn2.weight", [128]], ["block3.layer.1.bn2.bias", [128]], ["block3.layer.1.conv2.weight", [128, 128, 3, 3]], ["block3.layer.2.bn1.weight", [128]], ["block3.layer.2.bn1.bias", [128]], ["block3.layer.2.conv1.weight", [128, 128, 3, 3]], ["block3.layer.2.bn2.weight", [128]], ["block3.layer.2.bn2.bias", [128]], ["block3.layer.2.conv2.weight", [128, 128, 3, 3]], ["bn1.weight", [128]], ["bn1.bias", [128]], ["fc.weight", [10, 128]], ["fc.bias", [10]]], "output_shape": [[128, 10]], "num_parameters": [432, 16, 16, 4608, 32, 32, 9216, 512, 32, 32, 9216, 32, 32, 9216, 32, 32, 9216, 32, 32, 9216, 32, 32, 18432, 64, 64, 36864, 2048, 64, 64, 36864, 64, 64, 36864, 64, 64, 36864, 64, 64, 36864, 64, 64, 73728, 128, 128, 147456, 8192, 128, 128, 147456, 128, 128, 147456, 128, 128, 147456, 128, 128, 147456, 128, 128, 1280, 10]}, {"name": "accuracy", "id": 47246390350992, "class_name": "Accuracy()", "parameters": [], "output_shape": [[]], "num_parameters": []}], "edges": []}